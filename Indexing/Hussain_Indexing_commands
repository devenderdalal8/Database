/*                          Spin up postgres using docker                       */

docker run -e POSTGRES_PASSWORD=postgres --name pg1 postgres
docker exec -it pg1 psql -U postgres
create table temp(t int )
insert into temp(t) select random()*100 from generate_series(0,1000000); // milion rows.





/*                          Indexing                        */

CREATE TABLE employees (
  id SERIAL PRIMARY KEY NOT NULL,
  name CHARACTER VARYING(255)
);


 -- Create a function to generate random strings
 CREATE OR REPLACE FUNCTION random_string(length integer) RETURNS text AS $$
  SELECT array_to_string(array_agg(chr((65 + round(random() * 25))::int)), '')
  FROM generate_series(1, $1);
$$ LANGUAGE SQL;

  INSERT INTO mvcc_test (name)
  SELECT random_string(10)
  FROM generate_series(1, 11000000);

  INSERT INTO employees (name)
  SELECT random_string(10)
  FROM generate_series(1, 10000000);



  explain analyze select id from employees where id = 2000;    // index only scan fast, as in bt key we found the id.


  explain analyze select name from employees where id =50000; // index scan, as we find the id from index scan, but for getting name we need to go to heap   why? Find later....



   explain analyse select id from employees where name = 'HUODMPTDGE'
    - full table scan
    - parallel scan
    - sequencial scan


 explain analyse select id, name from employees where name like '%ml';    // go to all rows and does matching....
  - what are workers ...




  create index employees_name on employees(name) ;   // creating bt tree  and fetching all 11 million rows..


  explain analyse select id,name from employees where name = 'UBLCIFSIWY'  // now faster, using index for scan


  explain analyse select name,id from employees where name = 'UBLCIFSIWY'
    -- use index....



   explain analyse select name,id from employees where name = 'xn%'
    - like operattor always use sequential scan......







    /*                          Sql query planner and optimizer with explain                        */




     -- Create a function to generate random strings
    CREATE OR REPLACE FUNCTION random_string(length integer) RETURNS text AS $$
      SELECT array_to_string(array_agg(chr((65 + round(random() * 25))::int)), '')
      FROM generate_series(1, $1);
    $$ LANGUAGE SQL;

    -- Insert 20 million rows into the grades table
    INSERT INTO grades (grade_id, name)
    SELECT random(), random_string(10)
    FROM generate_series(1, 2000000);






 explain select * from grades order by id;  // why this query not used index? as we have index on id.
    -- same query with LIMIT can go to heap table for scanning
    -- so depeneds on cost estimation postgres decidew whether to use index table or not.





explain select * from grades order by name;
                                     QUERY PLAN
-------------------------------------------------------------------------------------
 Gather Merge  (cost=159673.31..354180.26 rows=1667086 width=23)
   Workers Planned: 2
   ->  Sort  (cost=158673.29..160757.15 rows=833543 width=23)
         Sort Key: name
         ->  Parallel Seq Scan on grades  (cost=0.00..59601.43 rows=833543 width=23)


-- going from bottom to up
    - fetch all rows from heap
    - sort all using 2 threads
    - merge result of 2 threads.















  /*                          Bitmap Index scan vs index scan vs table scan                         */

postgres=# CREATE TABLE grades_1 (
  id SERIAL PRIMARY KEY NOT NULL,
  name CHARACTER VARYING(255)
);
CREATE TABLE
postgres=# -- Add the new columns
ALTER TABLE grades_1
ADD COLUMN g int,
ADD COLUMN firstname CHARACTER VARYING(255),
ADD COLUMN lastname CHARACTER VARYING(255),
ADD COLUMN address CHARACTER VARYING(255);
;
ALTER TABLE
postgres=# CREATE INDEX idx_g_id ON grades USING btree (g) INCLUDE (id);
ERROR:  column "g" does not exist
postgres=# CREATE INDEX idx_g_id ON grades_1 USING btree (g) INCLUDE (id);
CREATE INDEX
postgres=# \d grades_1`









postgres=# INSERT INTO grades_1 (g, name, firstname, lastname)
SELECT floor(random() * 100) + 1, random_string(10), random_string(10), random_string(10)
FROM generate_series(1, 10000000);


inset 10 million.

explain analyze select id from grades_1 where g = 50;
                                     QUERY PLAN